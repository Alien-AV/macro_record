// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Events.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Events.proto</summary>
public static partial class EventsReflection {

  #region Descriptor
  /// <summary>File descriptor for Events.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static EventsReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgxFdmVudHMucHJvdG8i7AIKCklucHV0RXZlbnQSIQoZdGltZVNpbmNlU3Rh",
          "cnRPZlJlY29yZGluZxgBIAEoBBI2Cg1rZXlib2FyZEV2ZW50GAIgASgLMh0u",
          "SW5wdXRFdmVudC5LZXlib2FyZEV2ZW50VHlwZUgAEjAKCm1vdXNlRXZlbnQY",
          "AyABKAsyGi5JbnB1dEV2ZW50Lk1vdXNlRXZlbnRUeXBlSAAaOgoRS2V5Ym9h",
          "cmRFdmVudFR5cGUSFgoOdmlydHVhbEtleUNvZGUYASABKA0SDQoFa2V5VXAY",
          "AiABKAgaiwEKDk1vdXNlRXZlbnRUeXBlEgkKAXgYASABKAUSCQoBeRgCIAEo",
          "BRISCgphY3Rpb25UeXBlGAMgASgNEhUKDXdoZWVsUm90YXRpb24YBCABKA0S",
          "GAoQcmVsYXRpdmVQb3NpdGlvbhgFIAEoCBIeChZtYXBwZWRUb1ZpcnR1YWxE",
          "ZXNrdG9wGAYgASgIQgcKBUV2ZW50IjIKDklucHV0RXZlbnRMaXN0EiAKC2lu",
          "cHV0RXZlbnRzGAEgAygLMgsuSW5wdXRFdmVudGIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::InputEvent), global::InputEvent.Parser, new[]{ "TimeSinceStartOfRecording", "KeyboardEvent", "MouseEvent" }, new[]{ "Event" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::InputEvent.Types.KeyboardEventType), global::InputEvent.Types.KeyboardEventType.Parser, new[]{ "VirtualKeyCode", "KeyUp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InputEvent.Types.MouseEventType), global::InputEvent.Types.MouseEventType.Parser, new[]{ "X", "Y", "ActionType", "WheelRotation", "RelativePosition", "MappedToVirtualDesktop" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::InputEventList), global::InputEventList.Parser, new[]{ "InputEvents" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class InputEvent : pb::IMessage<InputEvent> {
  private static readonly pb::MessageParser<InputEvent> _parser = new pb::MessageParser<InputEvent>(() => new InputEvent());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<InputEvent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EventsReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputEvent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputEvent(InputEvent other) : this() {
    timeSinceStartOfRecording_ = other.timeSinceStartOfRecording_;
    switch (other.EventCase) {
      case EventOneofCase.KeyboardEvent:
        KeyboardEvent = other.KeyboardEvent.Clone();
        break;
      case EventOneofCase.MouseEvent:
        MouseEvent = other.MouseEvent.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputEvent Clone() {
    return new InputEvent(this);
  }

  /// <summary>Field number for the "timeSinceStartOfRecording" field.</summary>
  public const int TimeSinceStartOfRecordingFieldNumber = 1;
  private ulong timeSinceStartOfRecording_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong TimeSinceStartOfRecording {
    get { return timeSinceStartOfRecording_; }
    set {
      timeSinceStartOfRecording_ = value;
    }
  }

  /// <summary>Field number for the "keyboardEvent" field.</summary>
  public const int KeyboardEventFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::InputEvent.Types.KeyboardEventType KeyboardEvent {
    get { return eventCase_ == EventOneofCase.KeyboardEvent ? (global::InputEvent.Types.KeyboardEventType) event_ : null; }
    set {
      event_ = value;
      eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.KeyboardEvent;
    }
  }

  /// <summary>Field number for the "mouseEvent" field.</summary>
  public const int MouseEventFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::InputEvent.Types.MouseEventType MouseEvent {
    get { return eventCase_ == EventOneofCase.MouseEvent ? (global::InputEvent.Types.MouseEventType) event_ : null; }
    set {
      event_ = value;
      eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.MouseEvent;
    }
  }

  private object event_;
  /// <summary>Enum of possible cases for the "Event" oneof.</summary>
  public enum EventOneofCase {
    None = 0,
    KeyboardEvent = 2,
    MouseEvent = 3,
  }
  private EventOneofCase eventCase_ = EventOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventOneofCase EventCase {
    get { return eventCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEvent() {
    eventCase_ = EventOneofCase.None;
    event_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as InputEvent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(InputEvent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TimeSinceStartOfRecording != other.TimeSinceStartOfRecording) return false;
    if (!object.Equals(KeyboardEvent, other.KeyboardEvent)) return false;
    if (!object.Equals(MouseEvent, other.MouseEvent)) return false;
    if (EventCase != other.EventCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TimeSinceStartOfRecording != 0UL) hash ^= TimeSinceStartOfRecording.GetHashCode();
    if (eventCase_ == EventOneofCase.KeyboardEvent) hash ^= KeyboardEvent.GetHashCode();
    if (eventCase_ == EventOneofCase.MouseEvent) hash ^= MouseEvent.GetHashCode();
    hash ^= (int) eventCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TimeSinceStartOfRecording != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(TimeSinceStartOfRecording);
    }
    if (eventCase_ == EventOneofCase.KeyboardEvent) {
      output.WriteRawTag(18);
      output.WriteMessage(KeyboardEvent);
    }
    if (eventCase_ == EventOneofCase.MouseEvent) {
      output.WriteRawTag(26);
      output.WriteMessage(MouseEvent);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TimeSinceStartOfRecording != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeSinceStartOfRecording);
    }
    if (eventCase_ == EventOneofCase.KeyboardEvent) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(KeyboardEvent);
    }
    if (eventCase_ == EventOneofCase.MouseEvent) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MouseEvent);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(InputEvent other) {
    if (other == null) {
      return;
    }
    if (other.TimeSinceStartOfRecording != 0UL) {
      TimeSinceStartOfRecording = other.TimeSinceStartOfRecording;
    }
    switch (other.EventCase) {
      case EventOneofCase.KeyboardEvent:
        if (KeyboardEvent == null) {
          KeyboardEvent = new global::InputEvent.Types.KeyboardEventType();
        }
        KeyboardEvent.MergeFrom(other.KeyboardEvent);
        break;
      case EventOneofCase.MouseEvent:
        if (MouseEvent == null) {
          MouseEvent = new global::InputEvent.Types.MouseEventType();
        }
        MouseEvent.MergeFrom(other.MouseEvent);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TimeSinceStartOfRecording = input.ReadUInt64();
          break;
        }
        case 18: {
          global::InputEvent.Types.KeyboardEventType subBuilder = new global::InputEvent.Types.KeyboardEventType();
          if (eventCase_ == EventOneofCase.KeyboardEvent) {
            subBuilder.MergeFrom(KeyboardEvent);
          }
          input.ReadMessage(subBuilder);
          KeyboardEvent = subBuilder;
          break;
        }
        case 26: {
          global::InputEvent.Types.MouseEventType subBuilder = new global::InputEvent.Types.MouseEventType();
          if (eventCase_ == EventOneofCase.MouseEvent) {
            subBuilder.MergeFrom(MouseEvent);
          }
          input.ReadMessage(subBuilder);
          MouseEvent = subBuilder;
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the InputEvent message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class KeyboardEventType : pb::IMessage<KeyboardEventType> {
      private static readonly pb::MessageParser<KeyboardEventType> _parser = new pb::MessageParser<KeyboardEventType>(() => new KeyboardEventType());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<KeyboardEventType> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::InputEvent.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public KeyboardEventType() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public KeyboardEventType(KeyboardEventType other) : this() {
        virtualKeyCode_ = other.virtualKeyCode_;
        keyUp_ = other.keyUp_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public KeyboardEventType Clone() {
        return new KeyboardEventType(this);
      }

      /// <summary>Field number for the "virtualKeyCode" field.</summary>
      public const int VirtualKeyCodeFieldNumber = 1;
      private uint virtualKeyCode_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint VirtualKeyCode {
        get { return virtualKeyCode_; }
        set {
          virtualKeyCode_ = value;
        }
      }

      /// <summary>Field number for the "keyUp" field.</summary>
      public const int KeyUpFieldNumber = 2;
      private bool keyUp_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool KeyUp {
        get { return keyUp_; }
        set {
          keyUp_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as KeyboardEventType);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(KeyboardEventType other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (VirtualKeyCode != other.VirtualKeyCode) return false;
        if (KeyUp != other.KeyUp) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (VirtualKeyCode != 0) hash ^= VirtualKeyCode.GetHashCode();
        if (KeyUp != false) hash ^= KeyUp.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (VirtualKeyCode != 0) {
          output.WriteRawTag(8);
          output.WriteUInt32(VirtualKeyCode);
        }
        if (KeyUp != false) {
          output.WriteRawTag(16);
          output.WriteBool(KeyUp);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (VirtualKeyCode != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VirtualKeyCode);
        }
        if (KeyUp != false) {
          size += 1 + 1;
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(KeyboardEventType other) {
        if (other == null) {
          return;
        }
        if (other.VirtualKeyCode != 0) {
          VirtualKeyCode = other.VirtualKeyCode;
        }
        if (other.KeyUp != false) {
          KeyUp = other.KeyUp;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              VirtualKeyCode = input.ReadUInt32();
              break;
            }
            case 16: {
              KeyUp = input.ReadBool();
              break;
            }
          }
        }
      }

    }

    public sealed partial class MouseEventType : pb::IMessage<MouseEventType> {
      private static readonly pb::MessageParser<MouseEventType> _parser = new pb::MessageParser<MouseEventType>(() => new MouseEventType());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<MouseEventType> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::InputEvent.Descriptor.NestedTypes[1]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public MouseEventType() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public MouseEventType(MouseEventType other) : this() {
        x_ = other.x_;
        y_ = other.y_;
        actionType_ = other.actionType_;
        wheelRotation_ = other.wheelRotation_;
        relativePosition_ = other.relativePosition_;
        mappedToVirtualDesktop_ = other.mappedToVirtualDesktop_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public MouseEventType Clone() {
        return new MouseEventType(this);
      }

      /// <summary>Field number for the "x" field.</summary>
      public const int XFieldNumber = 1;
      private int x_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int X {
        get { return x_; }
        set {
          x_ = value;
        }
      }

      /// <summary>Field number for the "y" field.</summary>
      public const int YFieldNumber = 2;
      private int y_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Y {
        get { return y_; }
        set {
          y_ = value;
        }
      }

      /// <summary>Field number for the "actionType" field.</summary>
      public const int ActionTypeFieldNumber = 3;
      private uint actionType_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint ActionType {
        get { return actionType_; }
        set {
          actionType_ = value;
        }
      }

      /// <summary>Field number for the "wheelRotation" field.</summary>
      public const int WheelRotationFieldNumber = 4;
      private uint wheelRotation_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint WheelRotation {
        get { return wheelRotation_; }
        set {
          wheelRotation_ = value;
        }
      }

      /// <summary>Field number for the "relativePosition" field.</summary>
      public const int RelativePositionFieldNumber = 5;
      private bool relativePosition_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool RelativePosition {
        get { return relativePosition_; }
        set {
          relativePosition_ = value;
        }
      }

      /// <summary>Field number for the "mappedToVirtualDesktop" field.</summary>
      public const int MappedToVirtualDesktopFieldNumber = 6;
      private bool mappedToVirtualDesktop_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool MappedToVirtualDesktop {
        get { return mappedToVirtualDesktop_; }
        set {
          mappedToVirtualDesktop_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as MouseEventType);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(MouseEventType other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (X != other.X) return false;
        if (Y != other.Y) return false;
        if (ActionType != other.ActionType) return false;
        if (WheelRotation != other.WheelRotation) return false;
        if (RelativePosition != other.RelativePosition) return false;
        if (MappedToVirtualDesktop != other.MappedToVirtualDesktop) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (X != 0) hash ^= X.GetHashCode();
        if (Y != 0) hash ^= Y.GetHashCode();
        if (ActionType != 0) hash ^= ActionType.GetHashCode();
        if (WheelRotation != 0) hash ^= WheelRotation.GetHashCode();
        if (RelativePosition != false) hash ^= RelativePosition.GetHashCode();
        if (MappedToVirtualDesktop != false) hash ^= MappedToVirtualDesktop.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (X != 0) {
          output.WriteRawTag(8);
          output.WriteInt32(X);
        }
        if (Y != 0) {
          output.WriteRawTag(16);
          output.WriteInt32(Y);
        }
        if (ActionType != 0) {
          output.WriteRawTag(24);
          output.WriteUInt32(ActionType);
        }
        if (WheelRotation != 0) {
          output.WriteRawTag(32);
          output.WriteUInt32(WheelRotation);
        }
        if (RelativePosition != false) {
          output.WriteRawTag(40);
          output.WriteBool(RelativePosition);
        }
        if (MappedToVirtualDesktop != false) {
          output.WriteRawTag(48);
          output.WriteBool(MappedToVirtualDesktop);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (X != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
        }
        if (Y != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
        }
        if (ActionType != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActionType);
        }
        if (WheelRotation != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WheelRotation);
        }
        if (RelativePosition != false) {
          size += 1 + 1;
        }
        if (MappedToVirtualDesktop != false) {
          size += 1 + 1;
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(MouseEventType other) {
        if (other == null) {
          return;
        }
        if (other.X != 0) {
          X = other.X;
        }
        if (other.Y != 0) {
          Y = other.Y;
        }
        if (other.ActionType != 0) {
          ActionType = other.ActionType;
        }
        if (other.WheelRotation != 0) {
          WheelRotation = other.WheelRotation;
        }
        if (other.RelativePosition != false) {
          RelativePosition = other.RelativePosition;
        }
        if (other.MappedToVirtualDesktop != false) {
          MappedToVirtualDesktop = other.MappedToVirtualDesktop;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              X = input.ReadInt32();
              break;
            }
            case 16: {
              Y = input.ReadInt32();
              break;
            }
            case 24: {
              ActionType = input.ReadUInt32();
              break;
            }
            case 32: {
              WheelRotation = input.ReadUInt32();
              break;
            }
            case 40: {
              RelativePosition = input.ReadBool();
              break;
            }
            case 48: {
              MappedToVirtualDesktop = input.ReadBool();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

public sealed partial class InputEventList : pb::IMessage<InputEventList> {
  private static readonly pb::MessageParser<InputEventList> _parser = new pb::MessageParser<InputEventList>(() => new InputEventList());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<InputEventList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EventsReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputEventList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputEventList(InputEventList other) : this() {
    inputEvents_ = other.inputEvents_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputEventList Clone() {
    return new InputEventList(this);
  }

  /// <summary>Field number for the "inputEvents" field.</summary>
  public const int InputEventsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::InputEvent> _repeated_inputEvents_codec
      = pb::FieldCodec.ForMessage(10, global::InputEvent.Parser);
  private readonly pbc::RepeatedField<global::InputEvent> inputEvents_ = new pbc::RepeatedField<global::InputEvent>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::InputEvent> InputEvents {
    get { return inputEvents_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as InputEventList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(InputEventList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!inputEvents_.Equals(other.inputEvents_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= inputEvents_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    inputEvents_.WriteTo(output, _repeated_inputEvents_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += inputEvents_.CalculateSize(_repeated_inputEvents_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(InputEventList other) {
    if (other == null) {
      return;
    }
    inputEvents_.Add(other.inputEvents_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          inputEvents_.AddEntriesFrom(input, _repeated_inputEvents_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
