// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Events.proto

#include "Events.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Events_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Events_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InputEvent_KeyboardEventType;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Events_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InputEvent_MouseEventType;
}  // namespace protobuf_Events_2eproto
class InputEvent_KeyboardEventTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InputEvent_KeyboardEventType>
      _instance;
} _InputEvent_KeyboardEventType_default_instance_;
class InputEvent_MouseEventTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InputEvent_MouseEventType>
      _instance;
} _InputEvent_MouseEventType_default_instance_;
class InputEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InputEvent>
      _instance;
  const ::InputEvent_KeyboardEventType* keyboardevent_;
  const ::InputEvent_MouseEventType* mouseevent_;
} _InputEvent_default_instance_;
namespace protobuf_Events_2eproto {
static void InitDefaultsInputEvent_KeyboardEventType() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InputEvent_KeyboardEventType_default_instance_;
    new (ptr) ::InputEvent_KeyboardEventType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InputEvent_KeyboardEventType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InputEvent_KeyboardEventType =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInputEvent_KeyboardEventType}, {}};

static void InitDefaultsInputEvent_MouseEventType() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InputEvent_MouseEventType_default_instance_;
    new (ptr) ::InputEvent_MouseEventType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InputEvent_MouseEventType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InputEvent_MouseEventType =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInputEvent_MouseEventType}, {}};

static void InitDefaultsInputEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InputEvent_default_instance_;
    new (ptr) ::InputEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InputEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_InputEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsInputEvent}, {
      &protobuf_Events_2eproto::scc_info_InputEvent_KeyboardEventType.base,
      &protobuf_Events_2eproto::scc_info_InputEvent_MouseEventType.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_InputEvent_KeyboardEventType.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InputEvent_MouseEventType.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InputEvent.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InputEvent_KeyboardEventType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InputEvent_KeyboardEventType, virtualkeycode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InputEvent_KeyboardEventType, keyup_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InputEvent_MouseEventType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InputEvent_MouseEventType, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InputEvent_MouseEventType, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InputEvent_MouseEventType, actiontype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InputEvent_MouseEventType, wheelrotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InputEvent_MouseEventType, relativeposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InputEvent_MouseEventType, mappedtovirtualdesktop_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InputEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InputEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InputEvent, timesincestartofrecording_),
  offsetof(::InputEventDefaultTypeInternal, keyboardevent_),
  offsetof(::InputEventDefaultTypeInternal, mouseevent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InputEvent, Event_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::InputEvent_KeyboardEventType)},
  { 7, -1, sizeof(::InputEvent_MouseEventType)},
  { 18, -1, sizeof(::InputEvent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_InputEvent_KeyboardEventType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_InputEvent_MouseEventType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_InputEvent_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Events.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014Events.proto\"\354\002\n\nInputEvent\022!\n\031timeSin"
      "ceStartOfRecording\030\001 \001(\004\0226\n\rkeyboardEven"
      "t\030\002 \001(\0132\035.InputEvent.KeyboardEventTypeH\000"
      "\0220\n\nmouseEvent\030\003 \001(\0132\032.InputEvent.MouseE"
      "ventTypeH\000\032:\n\021KeyboardEventType\022\026\n\016virtu"
      "alKeyCode\030\001 \001(\r\022\r\n\005keyUp\030\002 \001(\010\032\213\001\n\016Mouse"
      "EventType\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 \001(\r\022\022\n\nactio"
      "nType\030\003 \001(\r\022\025\n\rwheelRotation\030\004 \001(\r\022\030\n\020re"
      "lativePosition\030\005 \001(\010\022\036\n\026mappedToVirtualD"
      "esktop\030\006 \001(\010B\007\n\005Eventb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 389);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Events.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Events_2eproto

// ===================================================================

void InputEvent_KeyboardEventType::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputEvent_KeyboardEventType::kVirtualKeyCodeFieldNumber;
const int InputEvent_KeyboardEventType::kKeyUpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputEvent_KeyboardEventType::InputEvent_KeyboardEventType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Events_2eproto::scc_info_InputEvent_KeyboardEventType.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:InputEvent.KeyboardEventType)
}
InputEvent_KeyboardEventType::InputEvent_KeyboardEventType(const InputEvent_KeyboardEventType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&virtualkeycode_, &from.virtualkeycode_,
    static_cast<size_t>(reinterpret_cast<char*>(&keyup_) -
    reinterpret_cast<char*>(&virtualkeycode_)) + sizeof(keyup_));
  // @@protoc_insertion_point(copy_constructor:InputEvent.KeyboardEventType)
}

void InputEvent_KeyboardEventType::SharedCtor() {
  ::memset(&virtualkeycode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keyup_) -
      reinterpret_cast<char*>(&virtualkeycode_)) + sizeof(keyup_));
}

InputEvent_KeyboardEventType::~InputEvent_KeyboardEventType() {
  // @@protoc_insertion_point(destructor:InputEvent.KeyboardEventType)
  SharedDtor();
}

void InputEvent_KeyboardEventType::SharedDtor() {
}

void InputEvent_KeyboardEventType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InputEvent_KeyboardEventType::descriptor() {
  ::protobuf_Events_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Events_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InputEvent_KeyboardEventType& InputEvent_KeyboardEventType::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Events_2eproto::scc_info_InputEvent_KeyboardEventType.base);
  return *internal_default_instance();
}


void InputEvent_KeyboardEventType::Clear() {
// @@protoc_insertion_point(message_clear_start:InputEvent.KeyboardEventType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&virtualkeycode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keyup_) -
      reinterpret_cast<char*>(&virtualkeycode_)) + sizeof(keyup_));
  _internal_metadata_.Clear();
}

bool InputEvent_KeyboardEventType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InputEvent.KeyboardEventType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 virtualKeyCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &virtualkeycode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool keyUp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keyup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InputEvent.KeyboardEventType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InputEvent.KeyboardEventType)
  return false;
#undef DO_
}

void InputEvent_KeyboardEventType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InputEvent.KeyboardEventType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 virtualKeyCode = 1;
  if (this->virtualkeycode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->virtualkeycode(), output);
  }

  // bool keyUp = 2;
  if (this->keyup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->keyup(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:InputEvent.KeyboardEventType)
}

::google::protobuf::uint8* InputEvent_KeyboardEventType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InputEvent.KeyboardEventType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 virtualKeyCode = 1;
  if (this->virtualkeycode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->virtualkeycode(), target);
  }

  // bool keyUp = 2;
  if (this->keyup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->keyup(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InputEvent.KeyboardEventType)
  return target;
}

size_t InputEvent_KeyboardEventType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InputEvent.KeyboardEventType)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 virtualKeyCode = 1;
  if (this->virtualkeycode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->virtualkeycode());
  }

  // bool keyUp = 2;
  if (this->keyup() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputEvent_KeyboardEventType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InputEvent.KeyboardEventType)
  GOOGLE_DCHECK_NE(&from, this);
  const InputEvent_KeyboardEventType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InputEvent_KeyboardEventType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InputEvent.KeyboardEventType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InputEvent.KeyboardEventType)
    MergeFrom(*source);
  }
}

void InputEvent_KeyboardEventType::MergeFrom(const InputEvent_KeyboardEventType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InputEvent.KeyboardEventType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.virtualkeycode() != 0) {
    set_virtualkeycode(from.virtualkeycode());
  }
  if (from.keyup() != 0) {
    set_keyup(from.keyup());
  }
}

void InputEvent_KeyboardEventType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InputEvent.KeyboardEventType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputEvent_KeyboardEventType::CopyFrom(const InputEvent_KeyboardEventType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InputEvent.KeyboardEventType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputEvent_KeyboardEventType::IsInitialized() const {
  return true;
}

void InputEvent_KeyboardEventType::Swap(InputEvent_KeyboardEventType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputEvent_KeyboardEventType::InternalSwap(InputEvent_KeyboardEventType* other) {
  using std::swap;
  swap(virtualkeycode_, other->virtualkeycode_);
  swap(keyup_, other->keyup_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InputEvent_KeyboardEventType::GetMetadata() const {
  protobuf_Events_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Events_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InputEvent_MouseEventType::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputEvent_MouseEventType::kXFieldNumber;
const int InputEvent_MouseEventType::kYFieldNumber;
const int InputEvent_MouseEventType::kActionTypeFieldNumber;
const int InputEvent_MouseEventType::kWheelRotationFieldNumber;
const int InputEvent_MouseEventType::kRelativePositionFieldNumber;
const int InputEvent_MouseEventType::kMappedToVirtualDesktopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputEvent_MouseEventType::InputEvent_MouseEventType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Events_2eproto::scc_info_InputEvent_MouseEventType.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:InputEvent.MouseEventType)
}
InputEvent_MouseEventType::InputEvent_MouseEventType(const InputEvent_MouseEventType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&mappedtovirtualdesktop_) -
    reinterpret_cast<char*>(&x_)) + sizeof(mappedtovirtualdesktop_));
  // @@protoc_insertion_point(copy_constructor:InputEvent.MouseEventType)
}

void InputEvent_MouseEventType::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mappedtovirtualdesktop_) -
      reinterpret_cast<char*>(&x_)) + sizeof(mappedtovirtualdesktop_));
}

InputEvent_MouseEventType::~InputEvent_MouseEventType() {
  // @@protoc_insertion_point(destructor:InputEvent.MouseEventType)
  SharedDtor();
}

void InputEvent_MouseEventType::SharedDtor() {
}

void InputEvent_MouseEventType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InputEvent_MouseEventType::descriptor() {
  ::protobuf_Events_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Events_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InputEvent_MouseEventType& InputEvent_MouseEventType::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Events_2eproto::scc_info_InputEvent_MouseEventType.base);
  return *internal_default_instance();
}


void InputEvent_MouseEventType::Clear() {
// @@protoc_insertion_point(message_clear_start:InputEvent.MouseEventType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mappedtovirtualdesktop_) -
      reinterpret_cast<char*>(&x_)) + sizeof(mappedtovirtualdesktop_));
  _internal_metadata_.Clear();
}

bool InputEvent_MouseEventType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InputEvent.MouseEventType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 actionType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actiontype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wheelRotation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wheelrotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool relativePosition = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &relativeposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool mappedToVirtualDesktop = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mappedtovirtualdesktop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InputEvent.MouseEventType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InputEvent.MouseEventType)
  return false;
#undef DO_
}

void InputEvent_MouseEventType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InputEvent.MouseEventType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // uint32 actionType = 3;
  if (this->actiontype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->actiontype(), output);
  }

  // uint32 wheelRotation = 4;
  if (this->wheelrotation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wheelrotation(), output);
  }

  // bool relativePosition = 5;
  if (this->relativeposition() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->relativeposition(), output);
  }

  // bool mappedToVirtualDesktop = 6;
  if (this->mappedtovirtualdesktop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mappedtovirtualdesktop(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:InputEvent.MouseEventType)
}

::google::protobuf::uint8* InputEvent_MouseEventType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InputEvent.MouseEventType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // uint32 actionType = 3;
  if (this->actiontype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->actiontype(), target);
  }

  // uint32 wheelRotation = 4;
  if (this->wheelrotation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wheelrotation(), target);
  }

  // bool relativePosition = 5;
  if (this->relativeposition() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->relativeposition(), target);
  }

  // bool mappedToVirtualDesktop = 6;
  if (this->mappedtovirtualdesktop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mappedtovirtualdesktop(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InputEvent.MouseEventType)
  return target;
}

size_t InputEvent_MouseEventType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InputEvent.MouseEventType)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x());
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y());
  }

  // uint32 actionType = 3;
  if (this->actiontype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->actiontype());
  }

  // uint32 wheelRotation = 4;
  if (this->wheelrotation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wheelrotation());
  }

  // bool relativePosition = 5;
  if (this->relativeposition() != 0) {
    total_size += 1 + 1;
  }

  // bool mappedToVirtualDesktop = 6;
  if (this->mappedtovirtualdesktop() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputEvent_MouseEventType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InputEvent.MouseEventType)
  GOOGLE_DCHECK_NE(&from, this);
  const InputEvent_MouseEventType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InputEvent_MouseEventType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InputEvent.MouseEventType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InputEvent.MouseEventType)
    MergeFrom(*source);
  }
}

void InputEvent_MouseEventType::MergeFrom(const InputEvent_MouseEventType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InputEvent.MouseEventType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.actiontype() != 0) {
    set_actiontype(from.actiontype());
  }
  if (from.wheelrotation() != 0) {
    set_wheelrotation(from.wheelrotation());
  }
  if (from.relativeposition() != 0) {
    set_relativeposition(from.relativeposition());
  }
  if (from.mappedtovirtualdesktop() != 0) {
    set_mappedtovirtualdesktop(from.mappedtovirtualdesktop());
  }
}

void InputEvent_MouseEventType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InputEvent.MouseEventType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputEvent_MouseEventType::CopyFrom(const InputEvent_MouseEventType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InputEvent.MouseEventType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputEvent_MouseEventType::IsInitialized() const {
  return true;
}

void InputEvent_MouseEventType::Swap(InputEvent_MouseEventType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputEvent_MouseEventType::InternalSwap(InputEvent_MouseEventType* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(actiontype_, other->actiontype_);
  swap(wheelrotation_, other->wheelrotation_);
  swap(relativeposition_, other->relativeposition_);
  swap(mappedtovirtualdesktop_, other->mappedtovirtualdesktop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InputEvent_MouseEventType::GetMetadata() const {
  protobuf_Events_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Events_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InputEvent::InitAsDefaultInstance() {
  ::_InputEvent_default_instance_.keyboardevent_ = const_cast< ::InputEvent_KeyboardEventType*>(
      ::InputEvent_KeyboardEventType::internal_default_instance());
  ::_InputEvent_default_instance_.mouseevent_ = const_cast< ::InputEvent_MouseEventType*>(
      ::InputEvent_MouseEventType::internal_default_instance());
}
void InputEvent::set_allocated_keyboardevent(::InputEvent_KeyboardEventType* keyboardevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_Event();
  if (keyboardevent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      keyboardevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, keyboardevent, submessage_arena);
    }
    set_has_keyboardevent();
    Event_.keyboardevent_ = keyboardevent;
  }
  // @@protoc_insertion_point(field_set_allocated:InputEvent.keyboardEvent)
}
void InputEvent::set_allocated_mouseevent(::InputEvent_MouseEventType* mouseevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_Event();
  if (mouseevent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mouseevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mouseevent, submessage_arena);
    }
    set_has_mouseevent();
    Event_.mouseevent_ = mouseevent;
  }
  // @@protoc_insertion_point(field_set_allocated:InputEvent.mouseEvent)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputEvent::kTimeSinceStartOfRecordingFieldNumber;
const int InputEvent::kKeyboardEventFieldNumber;
const int InputEvent::kMouseEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputEvent::InputEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Events_2eproto::scc_info_InputEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:InputEvent)
}
InputEvent::InputEvent(const InputEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timesincestartofrecording_ = from.timesincestartofrecording_;
  clear_has_Event();
  switch (from.Event_case()) {
    case kKeyboardEvent: {
      mutable_keyboardevent()->::InputEvent_KeyboardEventType::MergeFrom(from.keyboardevent());
      break;
    }
    case kMouseEvent: {
      mutable_mouseevent()->::InputEvent_MouseEventType::MergeFrom(from.mouseevent());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:InputEvent)
}

void InputEvent::SharedCtor() {
  timesincestartofrecording_ = GOOGLE_ULONGLONG(0);
  clear_has_Event();
}

InputEvent::~InputEvent() {
  // @@protoc_insertion_point(destructor:InputEvent)
  SharedDtor();
}

void InputEvent::SharedDtor() {
  if (has_Event()) {
    clear_Event();
  }
}

void InputEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InputEvent::descriptor() {
  ::protobuf_Events_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Events_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InputEvent& InputEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Events_2eproto::scc_info_InputEvent.base);
  return *internal_default_instance();
}


void InputEvent::clear_Event() {
// @@protoc_insertion_point(one_of_clear_start:InputEvent)
  switch (Event_case()) {
    case kKeyboardEvent: {
      delete Event_.keyboardevent_;
      break;
    }
    case kMouseEvent: {
      delete Event_.mouseevent_;
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void InputEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:InputEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timesincestartofrecording_ = GOOGLE_ULONGLONG(0);
  clear_Event();
  _internal_metadata_.Clear();
}

bool InputEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InputEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timeSinceStartOfRecording = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timesincestartofrecording_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .InputEvent.KeyboardEventType keyboardEvent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_keyboardevent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .InputEvent.MouseEventType mouseEvent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mouseevent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InputEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InputEvent)
  return false;
#undef DO_
}

void InputEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InputEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timeSinceStartOfRecording = 1;
  if (this->timesincestartofrecording() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timesincestartofrecording(), output);
  }

  // .InputEvent.KeyboardEventType keyboardEvent = 2;
  if (has_keyboardevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_keyboardevent(), output);
  }

  // .InputEvent.MouseEventType mouseEvent = 3;
  if (has_mouseevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_mouseevent(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:InputEvent)
}

::google::protobuf::uint8* InputEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InputEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timeSinceStartOfRecording = 1;
  if (this->timesincestartofrecording() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timesincestartofrecording(), target);
  }

  // .InputEvent.KeyboardEventType keyboardEvent = 2;
  if (has_keyboardevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_keyboardevent(), deterministic, target);
  }

  // .InputEvent.MouseEventType mouseEvent = 3;
  if (has_mouseevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_mouseevent(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InputEvent)
  return target;
}

size_t InputEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InputEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 timeSinceStartOfRecording = 1;
  if (this->timesincestartofrecording() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timesincestartofrecording());
  }

  switch (Event_case()) {
    // .InputEvent.KeyboardEventType keyboardEvent = 2;
    case kKeyboardEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *Event_.keyboardevent_);
      break;
    }
    // .InputEvent.MouseEventType mouseEvent = 3;
    case kMouseEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *Event_.mouseevent_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InputEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const InputEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InputEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InputEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InputEvent)
    MergeFrom(*source);
  }
}

void InputEvent::MergeFrom(const InputEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InputEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timesincestartofrecording() != 0) {
    set_timesincestartofrecording(from.timesincestartofrecording());
  }
  switch (from.Event_case()) {
    case kKeyboardEvent: {
      mutable_keyboardevent()->::InputEvent_KeyboardEventType::MergeFrom(from.keyboardevent());
      break;
    }
    case kMouseEvent: {
      mutable_mouseevent()->::InputEvent_MouseEventType::MergeFrom(from.mouseevent());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void InputEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InputEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputEvent::CopyFrom(const InputEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InputEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputEvent::IsInitialized() const {
  return true;
}

void InputEvent::Swap(InputEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputEvent::InternalSwap(InputEvent* other) {
  using std::swap;
  swap(timesincestartofrecording_, other->timesincestartofrecording_);
  swap(Event_, other->Event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InputEvent::GetMetadata() const {
  protobuf_Events_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Events_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::InputEvent_KeyboardEventType* Arena::CreateMaybeMessage< ::InputEvent_KeyboardEventType >(Arena* arena) {
  return Arena::CreateInternal< ::InputEvent_KeyboardEventType >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::InputEvent_MouseEventType* Arena::CreateMaybeMessage< ::InputEvent_MouseEventType >(Arena* arena) {
  return Arena::CreateInternal< ::InputEvent_MouseEventType >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::InputEvent* Arena::CreateMaybeMessage< ::InputEvent >(Arena* arena) {
  return Arena::CreateInternal< ::InputEvent >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
