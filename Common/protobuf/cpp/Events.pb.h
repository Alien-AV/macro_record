// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Events_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Events_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Events_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Events_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Events_2eproto;
namespace protobufGenerated {
class InputEvent;
struct InputEventDefaultTypeInternal;
extern InputEventDefaultTypeInternal _InputEvent_default_instance_;
class InputEventList;
struct InputEventListDefaultTypeInternal;
extern InputEventListDefaultTypeInternal _InputEventList_default_instance_;
class InputEvent_KeyboardEventType;
struct InputEvent_KeyboardEventTypeDefaultTypeInternal;
extern InputEvent_KeyboardEventTypeDefaultTypeInternal _InputEvent_KeyboardEventType_default_instance_;
class InputEvent_MouseEventType;
struct InputEvent_MouseEventTypeDefaultTypeInternal;
extern InputEvent_MouseEventTypeDefaultTypeInternal _InputEvent_MouseEventType_default_instance_;
}  // namespace protobufGenerated
PROTOBUF_NAMESPACE_OPEN
template<> ::protobufGenerated::InputEvent* Arena::CreateMaybeMessage<::protobufGenerated::InputEvent>(Arena*);
template<> ::protobufGenerated::InputEventList* Arena::CreateMaybeMessage<::protobufGenerated::InputEventList>(Arena*);
template<> ::protobufGenerated::InputEvent_KeyboardEventType* Arena::CreateMaybeMessage<::protobufGenerated::InputEvent_KeyboardEventType>(Arena*);
template<> ::protobufGenerated::InputEvent_MouseEventType* Arena::CreateMaybeMessage<::protobufGenerated::InputEvent_MouseEventType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobufGenerated {

// ===================================================================

class InputEvent_KeyboardEventType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobufGenerated.InputEvent.KeyboardEventType) */ {
 public:
  inline InputEvent_KeyboardEventType() : InputEvent_KeyboardEventType(nullptr) {}
  ~InputEvent_KeyboardEventType() override;
  explicit PROTOBUF_CONSTEXPR InputEvent_KeyboardEventType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputEvent_KeyboardEventType(const InputEvent_KeyboardEventType& from);
  InputEvent_KeyboardEventType(InputEvent_KeyboardEventType&& from) noexcept
    : InputEvent_KeyboardEventType() {
    *this = ::std::move(from);
  }

  inline InputEvent_KeyboardEventType& operator=(const InputEvent_KeyboardEventType& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputEvent_KeyboardEventType& operator=(InputEvent_KeyboardEventType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputEvent_KeyboardEventType& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputEvent_KeyboardEventType* internal_default_instance() {
    return reinterpret_cast<const InputEvent_KeyboardEventType*>(
               &_InputEvent_KeyboardEventType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InputEvent_KeyboardEventType& a, InputEvent_KeyboardEventType& b) {
    a.Swap(&b);
  }
  inline void Swap(InputEvent_KeyboardEventType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputEvent_KeyboardEventType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputEvent_KeyboardEventType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputEvent_KeyboardEventType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputEvent_KeyboardEventType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InputEvent_KeyboardEventType& from) {
    InputEvent_KeyboardEventType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputEvent_KeyboardEventType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobufGenerated.InputEvent.KeyboardEventType";
  }
  protected:
  explicit InputEvent_KeyboardEventType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualKeyCodeFieldNumber = 1,
    kKeyUpFieldNumber = 2,
  };
  // uint32 virtualKeyCode = 1;
  void clear_virtualkeycode();
  uint32_t virtualkeycode() const;
  void set_virtualkeycode(uint32_t value);
  private:
  uint32_t _internal_virtualkeycode() const;
  void _internal_set_virtualkeycode(uint32_t value);
  public:

  // bool keyUp = 2;
  void clear_keyup();
  bool keyup() const;
  void set_keyup(bool value);
  private:
  bool _internal_keyup() const;
  void _internal_set_keyup(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protobufGenerated.InputEvent.KeyboardEventType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t virtualkeycode_;
    bool keyup_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Events_2eproto;
};
// -------------------------------------------------------------------

class InputEvent_MouseEventType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobufGenerated.InputEvent.MouseEventType) */ {
 public:
  inline InputEvent_MouseEventType() : InputEvent_MouseEventType(nullptr) {}
  ~InputEvent_MouseEventType() override;
  explicit PROTOBUF_CONSTEXPR InputEvent_MouseEventType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputEvent_MouseEventType(const InputEvent_MouseEventType& from);
  InputEvent_MouseEventType(InputEvent_MouseEventType&& from) noexcept
    : InputEvent_MouseEventType() {
    *this = ::std::move(from);
  }

  inline InputEvent_MouseEventType& operator=(const InputEvent_MouseEventType& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputEvent_MouseEventType& operator=(InputEvent_MouseEventType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputEvent_MouseEventType& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputEvent_MouseEventType* internal_default_instance() {
    return reinterpret_cast<const InputEvent_MouseEventType*>(
               &_InputEvent_MouseEventType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InputEvent_MouseEventType& a, InputEvent_MouseEventType& b) {
    a.Swap(&b);
  }
  inline void Swap(InputEvent_MouseEventType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputEvent_MouseEventType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputEvent_MouseEventType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputEvent_MouseEventType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputEvent_MouseEventType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InputEvent_MouseEventType& from) {
    InputEvent_MouseEventType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputEvent_MouseEventType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobufGenerated.InputEvent.MouseEventType";
  }
  protected:
  explicit InputEvent_MouseEventType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kActionTypeFieldNumber = 3,
    kWheelRotationFieldNumber = 4,
    kRelativePositionFieldNumber = 5,
    kMappedToVirtualDesktopFieldNumber = 6,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // uint32 actionType = 3;
  void clear_actiontype();
  uint32_t actiontype() const;
  void set_actiontype(uint32_t value);
  private:
  uint32_t _internal_actiontype() const;
  void _internal_set_actiontype(uint32_t value);
  public:

  // uint32 wheelRotation = 4;
  void clear_wheelrotation();
  uint32_t wheelrotation() const;
  void set_wheelrotation(uint32_t value);
  private:
  uint32_t _internal_wheelrotation() const;
  void _internal_set_wheelrotation(uint32_t value);
  public:

  // bool relativePosition = 5;
  void clear_relativeposition();
  bool relativeposition() const;
  void set_relativeposition(bool value);
  private:
  bool _internal_relativeposition() const;
  void _internal_set_relativeposition(bool value);
  public:

  // bool mappedToVirtualDesktop = 6;
  void clear_mappedtovirtualdesktop();
  bool mappedtovirtualdesktop() const;
  void set_mappedtovirtualdesktop(bool value);
  private:
  bool _internal_mappedtovirtualdesktop() const;
  void _internal_set_mappedtovirtualdesktop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protobufGenerated.InputEvent.MouseEventType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    uint32_t actiontype_;
    uint32_t wheelrotation_;
    bool relativeposition_;
    bool mappedtovirtualdesktop_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Events_2eproto;
};
// -------------------------------------------------------------------

class InputEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobufGenerated.InputEvent) */ {
 public:
  inline InputEvent() : InputEvent(nullptr) {}
  ~InputEvent() override;
  explicit PROTOBUF_CONSTEXPR InputEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputEvent(const InputEvent& from);
  InputEvent(InputEvent&& from) noexcept
    : InputEvent() {
    *this = ::std::move(from);
  }

  inline InputEvent& operator=(const InputEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputEvent& operator=(InputEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputEvent& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kKeyboardEvent = 2,
    kMouseEvent = 3,
    EVENT_NOT_SET = 0,
  };

  static inline const InputEvent* internal_default_instance() {
    return reinterpret_cast<const InputEvent*>(
               &_InputEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InputEvent& a, InputEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(InputEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InputEvent& from) {
    InputEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobufGenerated.InputEvent";
  }
  protected:
  explicit InputEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InputEvent_KeyboardEventType KeyboardEventType;
  typedef InputEvent_MouseEventType MouseEventType;

  // accessors -------------------------------------------------------

  enum : int {
    kTimeSinceStartOfRecordingFieldNumber = 1,
    kKeyboardEventFieldNumber = 2,
    kMouseEventFieldNumber = 3,
  };
  // uint64 timeSinceStartOfRecording = 1;
  void clear_timesincestartofrecording();
  uint64_t timesincestartofrecording() const;
  void set_timesincestartofrecording(uint64_t value);
  private:
  uint64_t _internal_timesincestartofrecording() const;
  void _internal_set_timesincestartofrecording(uint64_t value);
  public:

  // .protobufGenerated.InputEvent.KeyboardEventType keyboardEvent = 2;
  bool has_keyboardevent() const;
  private:
  bool _internal_has_keyboardevent() const;
  public:
  void clear_keyboardevent();
  const ::protobufGenerated::InputEvent_KeyboardEventType& keyboardevent() const;
  PROTOBUF_NODISCARD ::protobufGenerated::InputEvent_KeyboardEventType* release_keyboardevent();
  ::protobufGenerated::InputEvent_KeyboardEventType* mutable_keyboardevent();
  void set_allocated_keyboardevent(::protobufGenerated::InputEvent_KeyboardEventType* keyboardevent);
  private:
  const ::protobufGenerated::InputEvent_KeyboardEventType& _internal_keyboardevent() const;
  ::protobufGenerated::InputEvent_KeyboardEventType* _internal_mutable_keyboardevent();
  public:
  void unsafe_arena_set_allocated_keyboardevent(
      ::protobufGenerated::InputEvent_KeyboardEventType* keyboardevent);
  ::protobufGenerated::InputEvent_KeyboardEventType* unsafe_arena_release_keyboardevent();

  // .protobufGenerated.InputEvent.MouseEventType mouseEvent = 3;
  bool has_mouseevent() const;
  private:
  bool _internal_has_mouseevent() const;
  public:
  void clear_mouseevent();
  const ::protobufGenerated::InputEvent_MouseEventType& mouseevent() const;
  PROTOBUF_NODISCARD ::protobufGenerated::InputEvent_MouseEventType* release_mouseevent();
  ::protobufGenerated::InputEvent_MouseEventType* mutable_mouseevent();
  void set_allocated_mouseevent(::protobufGenerated::InputEvent_MouseEventType* mouseevent);
  private:
  const ::protobufGenerated::InputEvent_MouseEventType& _internal_mouseevent() const;
  ::protobufGenerated::InputEvent_MouseEventType* _internal_mutable_mouseevent();
  public:
  void unsafe_arena_set_allocated_mouseevent(
      ::protobufGenerated::InputEvent_MouseEventType* mouseevent);
  ::protobufGenerated::InputEvent_MouseEventType* unsafe_arena_release_mouseevent();

  void clear_Event();
  EventCase Event_case() const;
  // @@protoc_insertion_point(class_scope:protobufGenerated.InputEvent)
 private:
  class _Internal;
  void set_has_keyboardevent();
  void set_has_mouseevent();

  inline bool has_Event() const;
  inline void clear_has_Event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t timesincestartofrecording_;
    union EventUnion {
      constexpr EventUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::protobufGenerated::InputEvent_KeyboardEventType* keyboardevent_;
      ::protobufGenerated::InputEvent_MouseEventType* mouseevent_;
    } Event_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Events_2eproto;
};
// -------------------------------------------------------------------

class InputEventList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobufGenerated.InputEventList) */ {
 public:
  inline InputEventList() : InputEventList(nullptr) {}
  ~InputEventList() override;
  explicit PROTOBUF_CONSTEXPR InputEventList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputEventList(const InputEventList& from);
  InputEventList(InputEventList&& from) noexcept
    : InputEventList() {
    *this = ::std::move(from);
  }

  inline InputEventList& operator=(const InputEventList& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputEventList& operator=(InputEventList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputEventList& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputEventList* internal_default_instance() {
    return reinterpret_cast<const InputEventList*>(
               &_InputEventList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InputEventList& a, InputEventList& b) {
    a.Swap(&b);
  }
  inline void Swap(InputEventList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputEventList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputEventList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputEventList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputEventList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InputEventList& from) {
    InputEventList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputEventList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobufGenerated.InputEventList";
  }
  protected:
  explicit InputEventList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputEventsFieldNumber = 1,
  };
  // repeated .protobufGenerated.InputEvent inputEvents = 1;
  int inputevents_size() const;
  private:
  int _internal_inputevents_size() const;
  public:
  void clear_inputevents();
  ::protobufGenerated::InputEvent* mutable_inputevents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobufGenerated::InputEvent >*
      mutable_inputevents();
  private:
  const ::protobufGenerated::InputEvent& _internal_inputevents(int index) const;
  ::protobufGenerated::InputEvent* _internal_add_inputevents();
  public:
  const ::protobufGenerated::InputEvent& inputevents(int index) const;
  ::protobufGenerated::InputEvent* add_inputevents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobufGenerated::InputEvent >&
      inputevents() const;

  // @@protoc_insertion_point(class_scope:protobufGenerated.InputEventList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobufGenerated::InputEvent > inputevents_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Events_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputEvent_KeyboardEventType

// uint32 virtualKeyCode = 1;
inline void InputEvent_KeyboardEventType::clear_virtualkeycode() {
  _impl_.virtualkeycode_ = 0u;
}
inline uint32_t InputEvent_KeyboardEventType::_internal_virtualkeycode() const {
  return _impl_.virtualkeycode_;
}
inline uint32_t InputEvent_KeyboardEventType::virtualkeycode() const {
  // @@protoc_insertion_point(field_get:protobufGenerated.InputEvent.KeyboardEventType.virtualKeyCode)
  return _internal_virtualkeycode();
}
inline void InputEvent_KeyboardEventType::_internal_set_virtualkeycode(uint32_t value) {
  
  _impl_.virtualkeycode_ = value;
}
inline void InputEvent_KeyboardEventType::set_virtualkeycode(uint32_t value) {
  _internal_set_virtualkeycode(value);
  // @@protoc_insertion_point(field_set:protobufGenerated.InputEvent.KeyboardEventType.virtualKeyCode)
}

// bool keyUp = 2;
inline void InputEvent_KeyboardEventType::clear_keyup() {
  _impl_.keyup_ = false;
}
inline bool InputEvent_KeyboardEventType::_internal_keyup() const {
  return _impl_.keyup_;
}
inline bool InputEvent_KeyboardEventType::keyup() const {
  // @@protoc_insertion_point(field_get:protobufGenerated.InputEvent.KeyboardEventType.keyUp)
  return _internal_keyup();
}
inline void InputEvent_KeyboardEventType::_internal_set_keyup(bool value) {
  
  _impl_.keyup_ = value;
}
inline void InputEvent_KeyboardEventType::set_keyup(bool value) {
  _internal_set_keyup(value);
  // @@protoc_insertion_point(field_set:protobufGenerated.InputEvent.KeyboardEventType.keyUp)
}

// -------------------------------------------------------------------

// InputEvent_MouseEventType

// int32 x = 1;
inline void InputEvent_MouseEventType::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t InputEvent_MouseEventType::_internal_x() const {
  return _impl_.x_;
}
inline int32_t InputEvent_MouseEventType::x() const {
  // @@protoc_insertion_point(field_get:protobufGenerated.InputEvent.MouseEventType.x)
  return _internal_x();
}
inline void InputEvent_MouseEventType::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void InputEvent_MouseEventType::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:protobufGenerated.InputEvent.MouseEventType.x)
}

// int32 y = 2;
inline void InputEvent_MouseEventType::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t InputEvent_MouseEventType::_internal_y() const {
  return _impl_.y_;
}
inline int32_t InputEvent_MouseEventType::y() const {
  // @@protoc_insertion_point(field_get:protobufGenerated.InputEvent.MouseEventType.y)
  return _internal_y();
}
inline void InputEvent_MouseEventType::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void InputEvent_MouseEventType::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:protobufGenerated.InputEvent.MouseEventType.y)
}

// uint32 actionType = 3;
inline void InputEvent_MouseEventType::clear_actiontype() {
  _impl_.actiontype_ = 0u;
}
inline uint32_t InputEvent_MouseEventType::_internal_actiontype() const {
  return _impl_.actiontype_;
}
inline uint32_t InputEvent_MouseEventType::actiontype() const {
  // @@protoc_insertion_point(field_get:protobufGenerated.InputEvent.MouseEventType.actionType)
  return _internal_actiontype();
}
inline void InputEvent_MouseEventType::_internal_set_actiontype(uint32_t value) {
  
  _impl_.actiontype_ = value;
}
inline void InputEvent_MouseEventType::set_actiontype(uint32_t value) {
  _internal_set_actiontype(value);
  // @@protoc_insertion_point(field_set:protobufGenerated.InputEvent.MouseEventType.actionType)
}

// uint32 wheelRotation = 4;
inline void InputEvent_MouseEventType::clear_wheelrotation() {
  _impl_.wheelrotation_ = 0u;
}
inline uint32_t InputEvent_MouseEventType::_internal_wheelrotation() const {
  return _impl_.wheelrotation_;
}
inline uint32_t InputEvent_MouseEventType::wheelrotation() const {
  // @@protoc_insertion_point(field_get:protobufGenerated.InputEvent.MouseEventType.wheelRotation)
  return _internal_wheelrotation();
}
inline void InputEvent_MouseEventType::_internal_set_wheelrotation(uint32_t value) {
  
  _impl_.wheelrotation_ = value;
}
inline void InputEvent_MouseEventType::set_wheelrotation(uint32_t value) {
  _internal_set_wheelrotation(value);
  // @@protoc_insertion_point(field_set:protobufGenerated.InputEvent.MouseEventType.wheelRotation)
}

// bool relativePosition = 5;
inline void InputEvent_MouseEventType::clear_relativeposition() {
  _impl_.relativeposition_ = false;
}
inline bool InputEvent_MouseEventType::_internal_relativeposition() const {
  return _impl_.relativeposition_;
}
inline bool InputEvent_MouseEventType::relativeposition() const {
  // @@protoc_insertion_point(field_get:protobufGenerated.InputEvent.MouseEventType.relativePosition)
  return _internal_relativeposition();
}
inline void InputEvent_MouseEventType::_internal_set_relativeposition(bool value) {
  
  _impl_.relativeposition_ = value;
}
inline void InputEvent_MouseEventType::set_relativeposition(bool value) {
  _internal_set_relativeposition(value);
  // @@protoc_insertion_point(field_set:protobufGenerated.InputEvent.MouseEventType.relativePosition)
}

// bool mappedToVirtualDesktop = 6;
inline void InputEvent_MouseEventType::clear_mappedtovirtualdesktop() {
  _impl_.mappedtovirtualdesktop_ = false;
}
inline bool InputEvent_MouseEventType::_internal_mappedtovirtualdesktop() const {
  return _impl_.mappedtovirtualdesktop_;
}
inline bool InputEvent_MouseEventType::mappedtovirtualdesktop() const {
  // @@protoc_insertion_point(field_get:protobufGenerated.InputEvent.MouseEventType.mappedToVirtualDesktop)
  return _internal_mappedtovirtualdesktop();
}
inline void InputEvent_MouseEventType::_internal_set_mappedtovirtualdesktop(bool value) {
  
  _impl_.mappedtovirtualdesktop_ = value;
}
inline void InputEvent_MouseEventType::set_mappedtovirtualdesktop(bool value) {
  _internal_set_mappedtovirtualdesktop(value);
  // @@protoc_insertion_point(field_set:protobufGenerated.InputEvent.MouseEventType.mappedToVirtualDesktop)
}

// -------------------------------------------------------------------

// InputEvent

// uint64 timeSinceStartOfRecording = 1;
inline void InputEvent::clear_timesincestartofrecording() {
  _impl_.timesincestartofrecording_ = uint64_t{0u};
}
inline uint64_t InputEvent::_internal_timesincestartofrecording() const {
  return _impl_.timesincestartofrecording_;
}
inline uint64_t InputEvent::timesincestartofrecording() const {
  // @@protoc_insertion_point(field_get:protobufGenerated.InputEvent.timeSinceStartOfRecording)
  return _internal_timesincestartofrecording();
}
inline void InputEvent::_internal_set_timesincestartofrecording(uint64_t value) {
  
  _impl_.timesincestartofrecording_ = value;
}
inline void InputEvent::set_timesincestartofrecording(uint64_t value) {
  _internal_set_timesincestartofrecording(value);
  // @@protoc_insertion_point(field_set:protobufGenerated.InputEvent.timeSinceStartOfRecording)
}

// .protobufGenerated.InputEvent.KeyboardEventType keyboardEvent = 2;
inline bool InputEvent::_internal_has_keyboardevent() const {
  return Event_case() == kKeyboardEvent;
}
inline bool InputEvent::has_keyboardevent() const {
  return _internal_has_keyboardevent();
}
inline void InputEvent::set_has_keyboardevent() {
  _impl_._oneof_case_[0] = kKeyboardEvent;
}
inline void InputEvent::clear_keyboardevent() {
  if (_internal_has_keyboardevent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Event_.keyboardevent_;
    }
    clear_has_Event();
  }
}
inline ::protobufGenerated::InputEvent_KeyboardEventType* InputEvent::release_keyboardevent() {
  // @@protoc_insertion_point(field_release:protobufGenerated.InputEvent.keyboardEvent)
  if (_internal_has_keyboardevent()) {
    clear_has_Event();
    ::protobufGenerated::InputEvent_KeyboardEventType* temp = _impl_.Event_.keyboardevent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Event_.keyboardevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobufGenerated::InputEvent_KeyboardEventType& InputEvent::_internal_keyboardevent() const {
  return _internal_has_keyboardevent()
      ? *_impl_.Event_.keyboardevent_
      : reinterpret_cast< ::protobufGenerated::InputEvent_KeyboardEventType&>(::protobufGenerated::_InputEvent_KeyboardEventType_default_instance_);
}
inline const ::protobufGenerated::InputEvent_KeyboardEventType& InputEvent::keyboardevent() const {
  // @@protoc_insertion_point(field_get:protobufGenerated.InputEvent.keyboardEvent)
  return _internal_keyboardevent();
}
inline ::protobufGenerated::InputEvent_KeyboardEventType* InputEvent::unsafe_arena_release_keyboardevent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobufGenerated.InputEvent.keyboardEvent)
  if (_internal_has_keyboardevent()) {
    clear_has_Event();
    ::protobufGenerated::InputEvent_KeyboardEventType* temp = _impl_.Event_.keyboardevent_;
    _impl_.Event_.keyboardevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InputEvent::unsafe_arena_set_allocated_keyboardevent(::protobufGenerated::InputEvent_KeyboardEventType* keyboardevent) {
  clear_Event();
  if (keyboardevent) {
    set_has_keyboardevent();
    _impl_.Event_.keyboardevent_ = keyboardevent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobufGenerated.InputEvent.keyboardEvent)
}
inline ::protobufGenerated::InputEvent_KeyboardEventType* InputEvent::_internal_mutable_keyboardevent() {
  if (!_internal_has_keyboardevent()) {
    clear_Event();
    set_has_keyboardevent();
    _impl_.Event_.keyboardevent_ = CreateMaybeMessage< ::protobufGenerated::InputEvent_KeyboardEventType >(GetArenaForAllocation());
  }
  return _impl_.Event_.keyboardevent_;
}
inline ::protobufGenerated::InputEvent_KeyboardEventType* InputEvent::mutable_keyboardevent() {
  ::protobufGenerated::InputEvent_KeyboardEventType* _msg = _internal_mutable_keyboardevent();
  // @@protoc_insertion_point(field_mutable:protobufGenerated.InputEvent.keyboardEvent)
  return _msg;
}

// .protobufGenerated.InputEvent.MouseEventType mouseEvent = 3;
inline bool InputEvent::_internal_has_mouseevent() const {
  return Event_case() == kMouseEvent;
}
inline bool InputEvent::has_mouseevent() const {
  return _internal_has_mouseevent();
}
inline void InputEvent::set_has_mouseevent() {
  _impl_._oneof_case_[0] = kMouseEvent;
}
inline void InputEvent::clear_mouseevent() {
  if (_internal_has_mouseevent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Event_.mouseevent_;
    }
    clear_has_Event();
  }
}
inline ::protobufGenerated::InputEvent_MouseEventType* InputEvent::release_mouseevent() {
  // @@protoc_insertion_point(field_release:protobufGenerated.InputEvent.mouseEvent)
  if (_internal_has_mouseevent()) {
    clear_has_Event();
    ::protobufGenerated::InputEvent_MouseEventType* temp = _impl_.Event_.mouseevent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Event_.mouseevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobufGenerated::InputEvent_MouseEventType& InputEvent::_internal_mouseevent() const {
  return _internal_has_mouseevent()
      ? *_impl_.Event_.mouseevent_
      : reinterpret_cast< ::protobufGenerated::InputEvent_MouseEventType&>(::protobufGenerated::_InputEvent_MouseEventType_default_instance_);
}
inline const ::protobufGenerated::InputEvent_MouseEventType& InputEvent::mouseevent() const {
  // @@protoc_insertion_point(field_get:protobufGenerated.InputEvent.mouseEvent)
  return _internal_mouseevent();
}
inline ::protobufGenerated::InputEvent_MouseEventType* InputEvent::unsafe_arena_release_mouseevent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobufGenerated.InputEvent.mouseEvent)
  if (_internal_has_mouseevent()) {
    clear_has_Event();
    ::protobufGenerated::InputEvent_MouseEventType* temp = _impl_.Event_.mouseevent_;
    _impl_.Event_.mouseevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InputEvent::unsafe_arena_set_allocated_mouseevent(::protobufGenerated::InputEvent_MouseEventType* mouseevent) {
  clear_Event();
  if (mouseevent) {
    set_has_mouseevent();
    _impl_.Event_.mouseevent_ = mouseevent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobufGenerated.InputEvent.mouseEvent)
}
inline ::protobufGenerated::InputEvent_MouseEventType* InputEvent::_internal_mutable_mouseevent() {
  if (!_internal_has_mouseevent()) {
    clear_Event();
    set_has_mouseevent();
    _impl_.Event_.mouseevent_ = CreateMaybeMessage< ::protobufGenerated::InputEvent_MouseEventType >(GetArenaForAllocation());
  }
  return _impl_.Event_.mouseevent_;
}
inline ::protobufGenerated::InputEvent_MouseEventType* InputEvent::mutable_mouseevent() {
  ::protobufGenerated::InputEvent_MouseEventType* _msg = _internal_mutable_mouseevent();
  // @@protoc_insertion_point(field_mutable:protobufGenerated.InputEvent.mouseEvent)
  return _msg;
}

inline bool InputEvent::has_Event() const {
  return Event_case() != EVENT_NOT_SET;
}
inline void InputEvent::clear_has_Event() {
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}
inline InputEvent::EventCase InputEvent::Event_case() const {
  return InputEvent::EventCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// InputEventList

// repeated .protobufGenerated.InputEvent inputEvents = 1;
inline int InputEventList::_internal_inputevents_size() const {
  return _impl_.inputevents_.size();
}
inline int InputEventList::inputevents_size() const {
  return _internal_inputevents_size();
}
inline void InputEventList::clear_inputevents() {
  _impl_.inputevents_.Clear();
}
inline ::protobufGenerated::InputEvent* InputEventList::mutable_inputevents(int index) {
  // @@protoc_insertion_point(field_mutable:protobufGenerated.InputEventList.inputEvents)
  return _impl_.inputevents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobufGenerated::InputEvent >*
InputEventList::mutable_inputevents() {
  // @@protoc_insertion_point(field_mutable_list:protobufGenerated.InputEventList.inputEvents)
  return &_impl_.inputevents_;
}
inline const ::protobufGenerated::InputEvent& InputEventList::_internal_inputevents(int index) const {
  return _impl_.inputevents_.Get(index);
}
inline const ::protobufGenerated::InputEvent& InputEventList::inputevents(int index) const {
  // @@protoc_insertion_point(field_get:protobufGenerated.InputEventList.inputEvents)
  return _internal_inputevents(index);
}
inline ::protobufGenerated::InputEvent* InputEventList::_internal_add_inputevents() {
  return _impl_.inputevents_.Add();
}
inline ::protobufGenerated::InputEvent* InputEventList::add_inputevents() {
  ::protobufGenerated::InputEvent* _add = _internal_add_inputevents();
  // @@protoc_insertion_point(field_add:protobufGenerated.InputEventList.inputEvents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobufGenerated::InputEvent >&
InputEventList::inputevents() const {
  // @@protoc_insertion_point(field_list:protobufGenerated.InputEventList.inputEvents)
  return _impl_.inputevents_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobufGenerated

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Events_2eproto
