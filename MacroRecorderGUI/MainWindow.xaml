<Fluent:RibbonWindow x:Class="MacroRecorderGUI.MainWindow"
                        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                        xmlns:Fluent="urn:fluent-ribbon"
                        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                        xmlns:viewModels="clr-namespace:MacroRecorderGUI.ViewModels"
                        xmlns:event="clr-namespace:MacroRecorderGUI.Event"
                        xmlns:designTimeViewModels="clr-namespace:MacroRecorderGUI.ViewModels.DesignTimeViewModels"
                        xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
                        mc:Ignorable="d"
                        Title="Macro Recorder" Height="750" Width="1000">
    <Window.DataContext>
        <viewModels:MainWindowViewModel/>
    </Window.DataContext>

    <Window.Resources>
        <DataTemplate x:Key="KeyEventTemplate" DataType="{x:Type TypeName=event:KeyboardEvent}">
            <StackPanel Orientation="Horizontal">
                <Border BorderBrush="Black" BorderThickness="1" Padding="4">
                    <TextBlock Text="Keyboard Event" TextAlignment="Center" Width="90"/>
                </Border>
                <Border BorderBrush="Black" BorderThickness="1" Padding="4" Margin="4,0,0,0">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Time Offset:"/>
                        <TextBox Text="{Binding TimeSinceLastEvent}" Margin="4,0,0,0" Width="50"/>
                    </StackPanel>
                </Border>
                <Border BorderBrush="Black" BorderThickness="1" Padding="4" Margin="4,0,0,0">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="VirtualKey:" Margin="4,0,0,0"/>
                        <TextBox Text="{Binding KeyName}" Margin="4,0,0,0" Width="100"/>
                        <CheckBox Content="KeyUp" IsChecked="{Binding KeyUp}" Margin="4,0,0,0"/>
                    </StackPanel>
                </Border>
            </StackPanel>
        </DataTemplate>
        <DataTemplate x:Key="MouseEventTemplate" DataType="{x:Type TypeName=event:MouseEvent}">
            <StackPanel Orientation="Horizontal">
                <Border BorderBrush="Black" BorderThickness="1" Padding="4">
                    <TextBlock Text="Mouse Event" TextAlignment="Center" Width="90"/>
                </Border>
                <Border BorderBrush="Black" BorderThickness="1" Padding="4" Margin="4,0,0,0">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Time Offset:"/>
                        <TextBox Text="{Binding TimeSinceLastEvent}" Margin="4,0,0,0" Width="50"/>
                    </StackPanel>
                </Border>
                <Border BorderBrush="Black" BorderThickness="1" Padding="4" Margin="4,0,0,0">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Rel:" Margin="4,0,0,0"/>
                        <CheckBox IsChecked="{Binding RelativePosition}" Margin="4,0,0,0"/>
                        <TextBlock Text="Coords:" Margin="4,0,0,0"/>
                        <TextBox Text="{Binding X}" Margin="4,0,0,0" Width="32"/>
                        <TextBox Text="{Binding Y}" Margin="4,0,0,0" Width="32"/>
                        <TextBlock Text="Action:" Margin="4,0,0,0"/>
                        <TextBox Text="{Binding ActionName}" Margin="4,0,0,0" Width="100"/>
                    </StackPanel>
                </Border>
            </StackPanel>
        </DataTemplate>
        <viewModels:EventTypeDataTemplateSelector x:Key="EventTypeDataTemplateSelector"/>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Fluent:Ribbon Grid.Row="0">

        <Fluent:Ribbon.Menu>
            <Fluent:Backstage>
                <Fluent:BackstageTabControl>
                    <Fluent:Button Header="New Macro" Icon="{iconPacks:RemixIcon Kind=AddBoxLine}" Click="AddTab_Click"/>
                    <Fluent:Button Header="Save Macro" Icon="{iconPacks:RemixIcon Kind=SaveLine}" Click="SaveEvents_Click"/>
                    <Fluent:Button Header="Load Macro" Icon="{iconPacks:RemixIcon Kind=FolderOpenLine}" Click="LoadEvents_Click"/>
                    <Fluent:Button Header="Close" Icon="{iconPacks:RemixIcon Kind=CloseLine}" Click="Close_Click"/>
                </Fluent:BackstageTabControl>
            </Fluent:Backstage>
        </Fluent:Ribbon.Menu>

        <Fluent:RibbonTabItem Header="Home">
            <Fluent:RibbonGroupBox Header="Recording">
                <Fluent:Button Header="Record" Icon="{iconPacks:RemixIcon Width=32,Height=32,Kind=PlayLine}" Click="StartRecord_Click"/>
                <Fluent:Button Header="Stop" Icon="{iconPacks:RemixIcon Width=32,Height=32,Kind=StopLine}" Click="StopRecord_Click"/>
            </Fluent:RibbonGroupBox>
            <Fluent:RibbonGroupBox Header="Record Options">
                <Fluent:CheckBox x:Name="ClearListOnStartRecord" IsChecked="True">Clear List On Record</Fluent:CheckBox>
            </Fluent:RibbonGroupBox>
            <Fluent:RibbonGroupBox Header="Playback">
                <Fluent:Button Header="Playback" Icon="{iconPacks:RemixIcon Width=32,Height=32,Kind=PlayLine}" Click="PlayEvents_Click"/>
                <Fluent:Button Header="Abort" Icon="{iconPacks:RemixIcon Width=32,Height=32,Kind=StopLine}" Click="AbortPlayback_Click"/>
            </Fluent:RibbonGroupBox>
            <Fluent:RibbonGroupBox Header="Playback Options">
                <Fluent:CheckBox x:Name="LoopIndefinitely"  IsChecked="{Binding LoopPlayback}">Loop Playback</Fluent:CheckBox>
            </Fluent:RibbonGroupBox>
        </Fluent:RibbonTabItem>
        <Fluent:RibbonTabItem Header="Edit">
            <Fluent:RibbonGroupBox Header="Create Event">
                <Fluent:Button Header="Mouse" Icon="{iconPacks:RemixIcon Width=32,Height=32,Kind=MouseLine}" Click="CreateMouseEventManually_Click"/>
                <Fluent:Button Header="Keyboard" Icon="{iconPacks:RemixIcon Width=32,Height=32,Kind=KeyboardBoxLine}" Click="CreateKeyboardEventManually_Click"/>
            </Fluent:RibbonGroupBox>
            <Fluent:RibbonGroupBox Header="Remove Event">
                <Fluent:Button Header="Selected" Icon="{iconPacks:RemixIcon Width=32,Height=32,Kind=ChatDeleteLine}" Click="RemoveEvent_Click"/>
                <Fluent:Button Header="Clear All" Icon="{iconPacks:RemixIcon Width=32,Height=32,Kind=DeleteBin2Line}" Click="ClearList_Click"/>
            </Fluent:RibbonGroupBox>
            <Fluent:RibbonGroupBox Header="Change Delays">
                <Fluent:TextBox x:Name="DelayTextBox" Header="Delay (μs) " PreviewTextInput="AllowOnlyNumbersInTextBox">5000</Fluent:TextBox>
                <Fluent:Button Header="Change Selected" Size="Middle" Icon="{iconPacks:RemixIcon Kind=ExchangeBoxLine}" Click="ChangeDelays_Click"/>
                <Fluent:CheckBox x:Name="AutoChangeDelay">Auto Change</Fluent:CheckBox>
            </Fluent:RibbonGroupBox>
            <Fluent:RibbonGroupBox Header="Misc">
                <Fluent:Button Header="Convert Mouse Events To Absolute Positioning" Icon="{iconPacks:RemixIcon Width=32,Height=32,Kind=MapPinLine}"
                               Click="ConvertMouseEventsToAbsolutePositioning_Click"/>
            </Fluent:RibbonGroupBox>
        </Fluent:RibbonTabItem>
        </Fluent:Ribbon>

        <TabControl Grid.Row="1" x:Name="TabControl" 
                    d:DataContext="{d:DesignInstance designTimeViewModels:DesignTimeMainWindowViewModel, IsDesignTimeCreatable=True}"
                    ItemsSource="{Binding MacroTabs}" SelectedIndex="{Binding SelectedTabIndex}">
            <TabControl.Resources>
                <Style TargetType="TabItem">
                    <Setter Property="AllowDrop" Value="True"/>
                    <EventSetter Event="MouseMove" Handler="TabItem_PreviewMouseMove"/>
                    <EventSetter Event="Drop" Handler="TabItem_Drop"/>
                </Style>
            </TabControl.Resources>
            <TabControl.ItemTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding Name}"/>
                        <Button Style="{StaticResource CrossButton}"  HorizontalAlignment="Right" Height="14" Margin="2,2,0,0" Command="{Binding CloseTabCommand}" CommandParameter="{Binding DataContext.MacroTabs, ElementName=TabControl}" />
                        <!-- TODO fix this: Cannot find source for binding with reference 'RelativeSource FindAncestor, AncestorType='System.Windows.Controls.TabControl', AncestorLevel='1''. BindingExpression:Path=TabStripPlacement; DataItem=null; target element is 'TabItem' (Name=''); target property is 'NoTarget' (type 'Object')-->
                        <!-- is there a cleaner way to call CloseTabCommand, not referencing the "collection to be removed from" in here? -->
                    </StackPanel>
                </DataTemplate>
            </TabControl.ItemTemplate>
            <TabControl.ContentTemplate>
                <DataTemplate DataType="{x:Type viewModels:MacroViewModel}">
                    <ListBox ItemsSource="{Binding Events}" ItemTemplateSelector="{StaticResource EventTypeDataTemplateSelector}" 
                             SelectionMode="Extended" KeyDown="EventsListBox_OnKeyDown" SelectionChanged="Selector_OnSelectionChanged"
                             HorizontalContentAlignment="Stretch"/>
                </DataTemplate>
            </TabControl.ContentTemplate>
        </TabControl>

        <TextBlock Grid.Row="2" x:Name="Instructions" Margin="2" TextWrapping="Wrap" Text="Global shortcuts: [Ctrl+Q Start Record] [Ctrl+W Stop Record] [Ctrl+E Play Events] [Ctrl+R Abort Playback]" VerticalAlignment="Bottom"/>
    </Grid>
</Fluent:RibbonWindow>

